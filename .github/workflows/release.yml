name: 发布Release

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: 打包并发布

    runs-on: ubuntu-latest

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

        with:
          fetch-depth: 0

      - name: 获取并更新版本号
        id: version

        run: |
          tag=$(grep -m1 '^## v' CHANGELOG.md | sed 's/^## //')
          echo "tag=$tag" >> $GITHUB_OUTPUT
          versionCode=$(grep '^versionCode=' ./module/module.prop | cut -d= -f2)
          version="$tag (${versionCode})"
          sed -i "s/^version=.*/version=$version/" ./module/module.prop

      - name: 推送更改至仓库
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add ./module/module.prop
          git commit -m "chore: 更新版本号"
          git push

      - name: 组装模块
        run: |
          mkdir -p ./pack/bin
          curl -L -o ./pack/bin/jq "https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-arm64"
          cp -r ./module/* ./pack
          cp -r ./prop ./pack
          cp -r ./script ./pack
          cd ./pack
          zip -r9 ../${{ github.event.repository.name }}_${{ steps.version.outputs.tag }}.zip .

      - name: 提取更新日志
        id: log

        run: |
          tag=${{ steps.version.outputs.tag }}
          log=$(awk -v tag="## $tag" '$0 == tag { f=1; next } /^## v/{ f=0 } f' CHANGELOG.md | sed '${/^$/d;}')
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 推送tag
        run: |
          git tag ${{ steps.version.outputs.tag }}
          git push --tags

      - name: 发布
        uses: softprops/action-gh-release@v2

        with:
          files: ./${{ github.event.repository.name }}_${{ steps.version.outputs.tag }}.zip

          tag_name: ${{ steps.version.outputs.tag }}

          name: ${{ steps.version.outputs.tag }}

          body: ${{ steps.log.outputs.log }}

          prerelease: ${{ startsWith(steps.version.outputs.tag, 'v0') }}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 推送到Telegram 频道
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

          MESSAGE: |+
            ```
            ${{ steps.log.outputs.log }}
            ```

        run: |
          FILE=$(find . -name '*.zip')
          ESCAPED_JSON=$(python3 -c 'import json, os; print(json.dumps([{"type": "document","media": "attach://file","parse_mode": "MarkdownV2","caption": os.environ["MESSAGE"]}]))'))
          curl -v -F "media=$ESCAPED_JSON" -F file=@"$FILE" "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=@hiruocha_channel"
